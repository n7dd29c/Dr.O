import { TreeViewState } from "../../models/index.js";
import { UseTreeViewExpansionSignature } from "./useTreeViewExpansion.types.js";
export declare const expansionSelectors: {
  /**
   * Gets the expanded items as provided to the component.
   */
  expandedItemsRaw: (state: TreeViewState<[UseTreeViewExpansionSignature]>) => string[];
  /**
   * Get the expanded items as a Map.
   * @param {TreeViewState<[UseTreeViewExpansionSignature]>} state The state of the tree view.
   * @returns {TreeViewExpansionValue} The expanded items as a Map.
   */
  expandedItemsMap: (args_0: import("../../corePlugins/useTreeViewId/useTreeViewId.types.js").UseTreeViewIdState & import("./useTreeViewExpansion.types.js").UseTreeViewExpansionState & Partial<{}>) => Map<string, true>;
  /**
   * Gets the slot that triggers the item's expansion when clicked.
   */
  triggerSlot: (state: TreeViewState<[UseTreeViewExpansionSignature]>) => "content" | "iconContainer";
  /**
   * Checks whether an item is expanded.
   */
  isItemExpanded: (args_0: import("../../corePlugins/useTreeViewId/useTreeViewId.types.js").UseTreeViewIdState & import("./useTreeViewExpansion.types.js").UseTreeViewExpansionState & Partial<{}>, itemId: string) => boolean;
  /**
   * Checks whether an item is expandable.
   */
  isItemExpandable: (args_0: import("../../corePlugins/useTreeViewId/useTreeViewId.types.js").UseTreeViewIdState & import("../useTreeViewItems/index.js").UseTreeViewItemsState<import("../../../index.js").TreeViewDefaultItemModelProperties> & Partial<{}>, _itemId: string) => boolean;
};