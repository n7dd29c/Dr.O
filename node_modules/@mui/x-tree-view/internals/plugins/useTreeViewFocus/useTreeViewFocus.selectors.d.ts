import { UseTreeViewFocusSignature } from "./useTreeViewFocus.types.js";
import { TreeViewState } from "../../models/index.js";
export declare const focusSelectors: {
  /**
   * Gets the item that should be sequentially focusable (usually with the Tab key).
   * At any point in time, there is a single item that can be sequentially focused in the Tree View.
   * This item is the first selected item (that is both visible and navigable), if any, or the first navigable item if no item is selected.
   */
  defaultFocusableItemId: (args_0: import("../../corePlugins/useTreeViewId/useTreeViewId.types.js").UseTreeViewIdState & import("../useTreeViewItems/index.js").UseTreeViewItemsState<import("../../../index.js").TreeViewDefaultItemModelProperties> & Partial<{}>) => string | null;
  /**
   * Checks whether an item is the default focusable item.
   */
  isItemTheDefaultFocusableItem: (args_0: import("../../corePlugins/useTreeViewId/useTreeViewId.types.js").UseTreeViewIdState & import("../useTreeViewItems/index.js").UseTreeViewItemsState<import("../../../index.js").TreeViewDefaultItemModelProperties> & Partial<{}>, itemId: any) => boolean;
  /**
   * Gets the id of the item that is currently focused.
   */
  focusedItemId: (state: TreeViewState<[UseTreeViewFocusSignature]>) => string | null;
  /**
   * Checks whether an item is focused.
   */
  isItemFocused: (state: TreeViewState<[UseTreeViewFocusSignature]>, itemId: string) => boolean;
};