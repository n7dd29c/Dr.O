"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expansionSelectors = void 0;
var _store = require("@mui/x-internals/store");
var _useTreeViewItems = require("../useTreeViewItems/useTreeViewItems.selectors");
const expandedItemMapSelector = (0, _store.createSelectorMemoized)(state => state.expansion.expandedItems, expandedItems => {
  const expandedItemsMap = new Map();
  expandedItems.forEach(id => {
    expandedItemsMap.set(id, true);
  });
  return expandedItemsMap;
});
const expansionSelectors = exports.expansionSelectors = {
  /**
   * Gets the expanded items as provided to the component.
   */
  expandedItemsRaw: (0, _store.createSelector)(state => state.expansion.expandedItems),
  /**
   * Get the expanded items as a Map.
   * @param {TreeViewState<[UseTreeViewExpansionSignature]>} state The state of the tree view.
   * @returns {TreeViewExpansionValue} The expanded items as a Map.
   */
  expandedItemsMap: expandedItemMapSelector,
  /**
   * Gets the slot that triggers the item's expansion when clicked.
   */
  triggerSlot: (0, _store.createSelector)(state => state.expansion.expansionTrigger),
  /**
   * Checks whether an item is expanded.
   */
  isItemExpanded: (0, _store.createSelector)(expandedItemMapSelector, (expandedItemsMap, itemId) => expandedItemsMap.has(itemId)),
  /**
   * Checks whether an item is expandable.
   */
  isItemExpandable: (0, _store.createSelector)(_useTreeViewItems.itemsSelectors.itemMeta, (itemMeta, _itemId) => itemMeta?.expandable ?? false)
};