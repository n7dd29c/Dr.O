{
  "version": 3,
  "sources": ["../../@mui/x-internals/esm/warning/warning.js", "../../@mui/x-internals/esm/useAssertModelConsistency/useAssertModelConsistency.js"],
  "sourcesContent": ["const warnedOnceCache = new Set();\n\n/**\n * Logs a message to the console on development mode. The warning will only be logged once.\n *\n * The message is the log's cache key. Two identical messages will only be logged once.\n *\n * This function is a no-op in production.\n *\n * @param message the message to log\n * @param gravity the gravity of the warning. Defaults to `'warning'`.\n * @returns\n */\nexport function warnOnce(message, gravity = 'warning') {\n  if (process.env.NODE_ENV === 'production') {\n    return;\n  }\n  const cleanMessage = Array.isArray(message) ? message.join('\\n') : message;\n  if (!warnedOnceCache.has(cleanMessage)) {\n    warnedOnceCache.add(cleanMessage);\n    if (gravity === 'error') {\n      console.error(cleanMessage);\n    } else {\n      console.warn(cleanMessage);\n    }\n  }\n}\nexport function clearWarningsCache() {\n  warnedOnceCache.clear();\n}", "'use client';\n\nimport * as React from 'react';\nimport { warnOnce } from \"../warning/index.js\";\n\n/**\n * Make sure a controlled prop is used correctly.\n * Logs errors if the prop either:\n *\n * - switch between controlled and uncontrolled\n * - modify it's default value\n * @param parameters\n */\nfunction useAssertModelConsistencyOutsideOfProduction(parameters) {\n  const {\n    componentName,\n    propName,\n    controlled,\n    defaultValue,\n    warningPrefix = 'MUI X'\n  } = parameters;\n  const [{\n    initialDefaultValue,\n    isControlled\n  }] = React.useState({\n    initialDefaultValue: defaultValue,\n    isControlled: controlled !== undefined\n  });\n  if (isControlled !== (controlled !== undefined)) {\n    warnOnce([`${warningPrefix}: A component is changing the ${isControlled ? '' : 'un'}controlled ${propName} state of ${componentName} to be ${isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled ${propName} ` + 'element for the lifetime of the component.', \"The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.\", 'More info: https://fb.me/react-controlled-components'], 'error');\n  }\n  if (JSON.stringify(initialDefaultValue) !== JSON.stringify(defaultValue)) {\n    warnOnce([`${warningPrefix}: A component is changing the default ${propName} state of an uncontrolled ${componentName} after being initialized. ` + `To suppress this warning opt to use a controlled ${componentName}.`], 'error');\n  }\n}\nexport const useAssertModelConsistency = process.env.NODE_ENV === 'production' ? () => {} : useAssertModelConsistencyOutsideOfProduction;"],
  "mappings": ";;;;;;;;AAAA,IAAM,kBAAkB,oBAAI,IAAI;AAazB,SAAS,SAAS,SAAS,UAAU,WAAW;AACrD,MAAI,OAAuC;AACzC;AAAA,EACF;AACA,QAAM,eAAe,MAAM,QAAQ,OAAO,IAAI,QAAQ,KAAK,IAAI,IAAI;AACnE,MAAI,CAAC,gBAAgB,IAAI,YAAY,GAAG;AACtC,oBAAgB,IAAI,YAAY;AAChC,QAAI,YAAY,SAAS;AACvB,cAAQ,MAAM,YAAY;AAAA,IAC5B,OAAO;AACL,cAAQ,KAAK,YAAY;AAAA,IAC3B;AAAA,EACF;AACF;;;ACxBA,YAAuB;AAWvB,SAAS,6CAA6C,YAAY;AAChE,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,gBAAgB;AAAA,EAClB,IAAI;AACJ,QAAM,CAAC;AAAA,IACL;AAAA,IACA;AAAA,EACF,CAAC,IAAU,eAAS;AAAA,IAClB,qBAAqB;AAAA,IACrB,cAAc,eAAe;AAAA,EAC/B,CAAC;AACD,MAAI,kBAAkB,eAAe,SAAY;AAC/C,aAAS,CAAC,GAAG,aAAa,iCAAiC,eAAe,KAAK,IAAI,cAAc,QAAQ,aAAa,aAAa,UAAU,eAAe,OAAO,EAAE,eAAe,+EAA+E,qDAAqD,QAAQ,+CAAoD,8HAA8H,sDAAsD,GAAG,OAAO;AAAA,EACpjB;AACA,MAAI,KAAK,UAAU,mBAAmB,MAAM,KAAK,UAAU,YAAY,GAAG;AACxE,aAAS,CAAC,GAAG,aAAa,yCAAyC,QAAQ,6BAA6B,aAAa,8EAAmF,aAAa,GAAG,GAAG,OAAO;AAAA,EACpO;AACF;AACO,IAAM,4BAA4B,QAAwC,MAAM;AAAC,IAAI;",
  "names": []
}
